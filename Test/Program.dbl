import Json

.define ASSERT_TYPE(val, type, message) if(val.JsonType != JSON_TYPE.type) throw new Exception(message)
.define ASSERT_EQUALS(val, target, message) if(val != target) throw new Exception(message)

;;; <summary>
;;; The main entry point for the application.
;;; </summary>
main
	record
		json, @Json
		val, @JsonValue
		objVal, @JsonObject
		propVal, @JsonValue
		buf, a65535
		bufString, @String
		myString, @string
		arrayObj, @JsonArray
		departmentObj, @JsonObject
proc
	;sleep(5000)
	open(2, O, "c:\wrk\log.txt")
	bufString = ""
	json = new Json()
	val = json.ParseJson('{"Hello":"Thing"}')
	ASSERT_TYPE(val, OBJ, "parsed response was the wrong type")
	objVal = (JsonObject)val
	propVal = objVal.GetProperty("Hello")
	ASSERT_TYPE(propVal, TEXT, "property value of Hello was wrong type")
	ASSERT_EQUALS(((JsonText)propVal).Value, "Thing", "property value was wrong")

	val = json.ParseJson('{"Departments":[{"DeptId":2, "Description":"narf"}]}')
	objVal = (JsonObject)val
	propVal = objVal.GetProperty("Departments")    ;Throws index out of bounds exception here
	arrayObj = (JsonArray)propVal
	departmentObj = (JsonObject)arrayObj.arrayValues[0]
	propVal = departmentObj.GetProperty("DeptId")
	myString = %string(((JsonInt)propVal).Value)
	ASSERT_EQUALS(((JsonText)departmentObj.GetProperty("Description")).Value, "narf", "property value was wrong")
	open(1, I, "c:\wrk\test1.json")
	do forever
	begin
		reads(1, buf, EOFLABEL)
		bufString += %atrim(buf)
		clear buf
		nextloop
EOFLABEL,
		bufString += %atrim(buf)
		clear buf
		exitloop
	end
	close(1)
	writes(2, %string(%cputime()))
	val = json.ParseJson(bufString)
	

	writes(2, %string(%cputime()))
endmain